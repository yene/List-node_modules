
#import "AppDelegate.h"

@interface AppDelegate () {
	NSMutableArray<NSURL *>* foundNodeModules;
}

@property (weak) IBOutlet NSTabView *tabView;
@property (weak) IBOutlet NSTableView *tableView;
@property (weak) IBOutlet NSWindow *window;
@property (weak) IBOutlet NSProgressIndicator *progress;

@end

@implementation AppDelegate

- (IBAction)selectFolder:(id)sender {
	NSOpenPanel *openPanel = [NSOpenPanel openPanel];
	openPanel.title = @"Select a folder to scan for node_modules";
	openPanel.allowsMultipleSelection = false;
	openPanel.canChooseDirectories = true;
	openPanel.canCreateDirectories = false;
	openPanel.canChooseFiles = false;
	openPanel.directoryURL = [NSURL fileURLWithPath:NSHomeDirectory()];
	if ([openPanel runModal] == NSModalResponseOK) {
		NSURL *url = [openPanel URL];
		NSLog(@"%@", url);
		foundNodeModules = [[NSMutableArray alloc] init];
		[self.tabView selectTabViewItemAtIndex:1];
		[self.progress startAnimation:nil];
		dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0ul);
		dispatch_async(queue, ^{
			[self walkFolder:url];
			dispatch_sync(dispatch_get_main_queue(), ^{
				[self.tabView selectTabViewItemAtIndex:2];
				[self.tableView reloadData];
			});
		});
	}
}

- (void)walkFolder:(NSURL *)folder {
	NSDirectoryEnumerator *de = [[NSFileManager defaultManager] enumeratorAtURL:folder includingPropertiesForKeys:@[NSURLNameKey, NSURLIsDirectoryKey] options:NSDirectoryEnumerationSkipsHiddenFiles errorHandler:nil];
	
	for (NSURL *fileURL in de) {
		NSNumber *isDirectory = nil;
		[fileURL getResourceValue:&isDirectory forKey:NSURLIsDirectoryKey error:nil];
		NSString *name = nil;
		[fileURL getResourceValue:&name forKey:NSURLNameKey error:nil];
		if ([isDirectory boolValue] && [name isEqualToString:@"node_modules"]) {
			[foundNodeModules addObject:fileURL];
			[de skipDescendants];
		}
	}
}

#pragma mark - Table Source
- (NSInteger)numberOfRowsInTableView:(NSTableView *)tableView; {
	return [foundNodeModules count];
}

- (id)tableView:(NSTableView *)tableView objectValueForTableColumn:(NSTableColumn *)tableColumn row:(NSInteger)row; {
	return [foundNodeModules objectAtIndex:row];
}

#pragma mark - Table Delegate

#pragma mark - App Delegate
- (void)applicationDidFinishLaunching:(NSNotification *)aNotification {
	[self.tabView selectTabViewItemAtIndex:0];
}
- (void)applicationWillTerminate:(NSNotification *)aNotification {
}
@end
